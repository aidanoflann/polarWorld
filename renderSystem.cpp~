#include <vector>
#include <cmath>
#include <iostream>

#include <SDL.h>
#include <math.h>
#include <SDL2_gfxPrimitives.h>
#include <SDL_ttf.h>
#include <SDL_image.h>

#include <typeinfo>

#include "renderSystem.h"
#include "gameObject.h"
#include "planet.h"
#include "game.h"

double radPerDeg = 0.01745329251;

int renderSystem::init()
{
	//first just give some information on the SDL version
	//SDL_version compiled;
	//SDL_version linked;

	//SDL_VERSION(&compiled);
	//SDL_GetVersion(&linked);
	
	//printf("We compiled against SDL version %d.%d.%d ...\n",
    //   compiled.major, compiled.minor, compiled.patch);
	//printf("But we are linking against SDL version %d.%d.%d.\n",
    //   linked.major, linked.minor, linked.patch);
	
	//set width and height
	width = 800;
	height = 600;
	cameraX = width/2;
	cameraY = height/2;
	cameraZoom = 1;
	cameraTheta = 0;
	
	//first let's initialise SDL2, 
	if (SDL_Init(SDL_INIT_VIDEO) != 0)
	{
		std::cout << "SDL_Init Error: " << SDL_GetError() << std::endl;
		return 1;
	}
	
	//set up window
	SDL_Window *win = SDL_CreateWindow("Polar World", 100, 100, (*this).width, (*this).height, SDL_WINDOW_SHOWN);
	//if the window creation fails, *win will be NULL
	if (win == nullptr)
	{
		std::cout << "SDL_CreateWindow Error: " << SDL_GetError() << std::endl;
		SDL_Quit();
		return 1;
	}
	
	//set up a renderer
	SDL_Renderer *ren = SDL_CreateRenderer(win, -1, 0);
	if (ren == nullptr)
	{
		SDL_DestroyWindow(win);
		std::cout << "SDL_CreateRenderer Error: " << SDL_GetError() << std::endl;
		SDL_Quit();
		return 1;
	}
	
	// Initialize SDL_ttf library
	if (TTF_Init() != 0)
	{
		std::cout << "TTF_Init() Failed: " << TTF_GetError() << std::endl;
		SDL_Quit();
		exit(1);
	}
	
	// Load a font
	font = TTF_OpenFont("FreeSans.ttf", 24);
	if (font == NULL)
	{
		std::cout << "TTF_OpenFont() Failed: " << TTF_GetError() << std::endl;
		TTF_Quit();
		SDL_Quit();
		exit(1);
	}
	
	(*this).ren = ren;
	(*this).win = win;
	
	//load all textures
	planet_png = IMG_Load("images/planet.png");
	player_png = IMG_Load("images/player.png");
}

void renderSystem::draw( Game& game)
{
	//update camera attributes
	cameraTheta = game.getPlayer()->getTheta() + 90;
	
	//First clear the renderer
	SDL_RenderClear(ren);
	
	//draw the background
	SDL_SetRenderDrawColor((*this).ren, 255, 255, 255, 255);
	SDL_Rect bg = {0,0, (int)std::round(width), (int)std::round(height)};
	SDL_RenderFillRect((*this).ren, &bg);
	
	//render the Planet
	renderSprite(game.getPlanet(), planet_png);
	
	//render the player
	renderPlayer(game.getPlayer());
	
	//render the cloud
	filledCircleRGBA(ren,
					 cameraX + game.getCloud()->getR() * cos( (cameraTheta + game.getCloud()->getTheta()) * radPerDeg),
					 cameraY + game.getCloud()->getR() * sin( (cameraTheta + game.getCloud()->getTheta()) * radPerDeg),
					 game.getCloud()->getCollisionRadius(),
					 100, 100, 100, 100);
	
	//render each groundenemy
	for (int i = 0; i != (game.getEnemies()).size(); i++)
	{
		gameObject en = *((game.getEnemies())[i]);
		filledCircleRGBA(ren,
					cameraX + en.getR() * cos( (cameraTheta + en.getTheta()) * radPerDeg),
					cameraY + en.getR() * sin( (cameraTheta + en.getTheta()) * radPerDeg),
					en.getCollisionRadius(),
					200, 100, 200, 200);
	}
	
	//render each bullet
	//TODO: Figure out iter implementation
	//for ( std::vector<Bullet>::iterator iter = (game.getBullets()).begin(); iter != (game.getBullets()).end(); iter++)
	for (int i = 0; i != (game.getBullets()).size(); i++)
	{
		Bullet b = *((game.getBullets())[i]);
		filledCircleRGBA(ren,
						cameraX + b.getR() * cos( (cameraTheta + b.getTheta()) * radPerDeg),
						cameraY + b.getR() * sin( (cameraTheta + b.getTheta()) * radPerDeg),
						b.getCollisionRadius(),
						250, 100, 100, 255);
	}
	//render the score text
	renderText("Score: " + std::to_string(game.getPlayer()->getNumKills()), (int)(width/2) - 100, 0 );
	
 	//render the fps text
	renderText("FPS: " + std::to_string(game.getFPS()), (int)(width/2) - 100, 32 );
// 	
	//Update the screen
	SDL_RenderPresent(ren);
}

void renderSystem::cleanup()
{
	TTF_CloseFont(font);
	SDL_DestroyRenderer((*this).ren);
	SDL_DestroyWindow((*this).win);	
	SDL_Quit();
}

//TODO: also fix more subtle memory leaks elsewhere
void renderSystem::renderPlayer(Player* player)
{
	//determine the target rectangle to render into
	SDL_Rect playerRect = { (int)(cameraX + player->getR() * cos( (-cameraTheta + player->getTheta()) * radPerDeg) - player->getCollisionRadius()),
							 (int)(cameraY + player->getR() * sin( (-cameraTheta + player->getTheta()) * radPerDeg) - player->getCollisionRadius()),
							 32,32};
	SDL_Texture* tex = SDL_CreateTextureFromSurface( ren, player_png);
	//depending on the direction player is facing, point the texture right or left
	if (player->getShootingRight())
		SDL_RenderCopyEx(ren, tex, NULL, &playerRect, 0, NULL, SDL_FLIP_NONE);
	else
		SDL_RenderCopyEx(ren, tex, NULL, &playerRect, 0, NULL, SDL_FLIP_HORIZONTAL);
	//cleanup
	SDL_DestroyTexture(tex);
}

void renderSystem::renderSprite(gameObject* obj, SDL_Surface* png)
{
	//determine the target rectangle to render into
	SDL_Rect planetRect = { (int)(cameraX - obj->getCollisionRadius() - 5),
							 (int)(cameraY - obj->getCollisionRadius() - 5),
							 (int)(obj->getCollisionRadius()*2)+10, (int)(obj->getCollisionRadius()*2)+10};
	
	SDL_Texture* tex = SDL_CreateTextureFromSurface(ren, png);
	//render the planet
	SDL_RenderCopyEx(ren, tex , NULL, &planetRect, cameraTheta + obj->getTheta(), NULL, SDL_FLIP_NONE);
	//cleanup
	SDL_DestroyTexture(tex);
}

void renderSystem::renderText(std::string message, int xcoordinate, int ycoordinate)
{
	char const* scoreChar = message.c_str();
	SDL_Surface* scoreText = TTF_RenderText_Solid( font, scoreChar,  {0, 0, 0, 255} );
	SDL_Rect scoreRect = { xcoordinate , ycoordinate, 0, 0};
	SDL_BlitSurface( scoreText,NULL, SDL_GetWindowSurface(win), &scoreRect );
	
	//cleanup
	//delete scoreChar;
	SDL_FreeSurface( scoreText );
}